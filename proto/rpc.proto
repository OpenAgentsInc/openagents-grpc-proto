syntax = "proto3";

import "Log.proto";
import "JobStatus.proto";
import "JobState.proto";
import "JobParam.proto";
import "JobInput.proto";
import "JobResult.proto";
import "Job.proto";
import "Payment.proto";
import "PaymentStatus.proto";

option php_namespace = 'App\\Grpc\\nostr';
option php_metadata_namespace = 'App\\Grpc\\nostr\\GPBMetadata';
message RpcRequestJob {
    string runOn = 1;
    uint64 expireAfter = 2;
    repeated JobInput input = 3;
    repeated JobParam param = 4;
    string description = 6;
    optional uint32 kind = 7;
    optional string outputFormat = 8; 
    optional string requestProvider = 9;
    optional bool encrypted = 10;
    optional string userId = 11;
    optional uint32 minWorkers = 12;
}

message RpcGetJob {
    string jobId = 1;
    optional uint32 wait = 99; // max time to wait in ms , 0 or unset means no wait
    optional uint32 nResultsToWait = 100; // max number of results to wait for
}

message RpcGetPendingJobs {
    optional string filterByRunOn = 1;
    optional string filterByCustomer = 2;
    optional string filterByDescription = 3;
    optional string filterById = 4;
    optional string filterByKind = 5;
    repeated string excludeId = 98; // which job ids to exclude, optional
    optional uint32 wait = 99; // max time to wait in ms , 0 or unset means no wait

}

message PendingJobs {
    repeated Job jobs = 1;
}


message RpcIsJobDone {
  bool isDone = 1;
}

message RpcAcceptJob {
  string jobId = 1;
}

message RpcCancelJob {
  string jobId = 1;
  string reason = 2;
}

message RpcJobOutput{
  string jobId = 1;
  string output = 2;
}

message RpcJobComplete{
  string jobId = 1;
  string output = 2;
  optional string info = 3;
}

message RpcJobLog {
  string jobId = 1;
  string log = 2;

}

message RpcSendSignedEventRequest {
  string groupId = 1; // the group id of the event, will be used for gc, etc. If generated by a job it should be set to the job id
  string event = 2;
}

message RpcSubscribeToEventsRequest {
  string groupId = 1; // the group id of the event, will be used for gc, etc. If generated by a job it should be set to the job id
  repeated string filters = 2;
}

message RpcSubscribeToEventsResponse{
  string groupId  = 1; // the group id of the event, will be used for gc, etc. If generated by a job it should be set to the job id
  string subscriptionId = 2;
}

message RpcGetEventsRequest {
  string groupId = 1; // the group id of the event, will be used for gc, etc. If generated by a job it should be set to the job id
  string subscriptionId = 2;
  uint32 limit = 3; // optional : 0 or unset means no limit
}

message RpcGetEventsResponse {
  string groupId = 1; // the group id of the event, will be used for gc, etc. If generated by a job it should be set to the job id
  uint32 count = 2;
  string subscriptionId = 3;
  repeated string events = 4;
}


message RpcSendSignedEventResponse{
  string groupId = 1; // the group id of the event, will be used for gc, etc. If generated by a job it should be set to the job id
  bool success = 2;
}

message RpcUnsubscribeFromEventsRequest{
  string groupId = 1; // the group id of the event, will be used for gc, etc. If generated by a job it should be set to the job id
  string subscriptionId = 2;
}

message RpcUnsubscribeFromEventsResponse{
  bool success = 1;
}


message RpcAnnounceNodeRequest {
  string iconUrl = 3;
  string name = 4;
  string description = 5;
}

message RpcAnnounceNodeResponse {
  bool success = 1;
  uint64 refreshInterval = 4;
  
}

message RpcAnnounceTemplateRequest { 
  string meta = 1;
  string template = 2;
  string sockets = 3;  
}

message RpcAnnounceTemplateResponse {
  bool success = 1;
  uint64 refreshInterval = 4;
}

message RpcCreateDiskRequest {
  optional string name = 1;
  optional string encryptionKey = 2;
  optional bool includeEncryptionKeyInUrl = 3;
}

message RpcCreateDiskResponse {
  string url = 1;
}

message RpcOpenDiskRequest {
  string url = 1;
  optional string encryptionKey = 2;
}

message RpcOpenDiskResponse {
  bool success = 1;
  string diskId = 2;
  uint64 version = 3;
}


message RpcCloseDiskRequest {
  string diskId = 1;
}

message RpcCloseDiskResponse {
  bool success = 1;
}

message RpcDiskDeleteFileRequest {
  string diskId = 1;
  string path = 2;
}

message RpcDiskDeleteFileResponse {
  bool success = 1;
}

message RpcDiskListFilesRequest {
  string diskId = 1;
  string path = 2;
}

message RpcDiskListFilesResponse {
  repeated string files = 1;
}

message RpcDiskReadFileRequest {
  string diskId = 1;
  string path = 2;
}

message RpcDiskReadFileResponse {
  bytes data = 1;
  bool exists = 2;
}

message RpcDiskWriteFileRequest {
  string diskId = 1;
  string path = 2;
  bytes data = 3;
}

message RpcDiskWriteFileResponse {
  bool success = 1;
}

message RpcCacheSetRequest {
  string key = 1;
  bytes data = 2;
  optional uint64 version = 3;
  optional uint64 expireAt = 4;
}

message RpcCacheSetResponse {
  bool success = 1;
}

message RpcCacheGetRequest {
  string key = 1;
  optional uint64 lastVersion = 2;
}

message RpcCacheGetResponse {
  bytes data = 1;
  bool exists = 2;
}


message RpcDiscoverPoolsRequest {

}

message RpcDiscoverPoolsResponse {
  repeated string pools = 1;
}

message RpcDiscoverNodesRequest {
  repeated int32 filterByKinds = 1;
  repeated string filterByPools = 2;
  repeated string filterByNodes = 3;
  repeated string filterByKindRanges = 4;
}

message RpcDiscoverNodesResponse {
  repeated string nodes = 1;
}

message RpcDiscoverActionsRequest {
  repeated int32 filterByKinds = 1;
  repeated string filterByPools = 2;
  repeated string filterByNodes = 3;
  repeated string filterByTags = 4;
  repeated string filterByKindRanges = 5;
}

message RpcDiscoverActionsResponse {
  repeated string actions = 1;
}

message RpcDiscoverNearbyNodesRequest {
  repeated int32 filterByKinds = 1;
  repeated string filterByNodes = 3;
  repeated string filterByKindRanges = 5;
}

message RpcDiscoverNearbyNodesResponse {
  repeated string nodes = 1;
}

message RpcDiscoverNearbyActionsRequest {
  repeated int32 filterByKinds = 1;
  repeated string filterByNodes = 3;
  repeated string filterByTags = 4;
  repeated string filterByKindRanges = 5;
}

message RpcDiscoverNearbyActionsResponse {
  repeated string actions = 1;
}

message RpcJobRequest {
  string event=1;
  optional string provider=2;
  optional bool encrypted=3;
}

service PoolConnector {
    // job management
    rpc requestJob (RpcRequestJob) returns (Job);
    rpc sendJobRequest(RpcJobRequest) returns (Job);
    rpc getJob (RpcGetJob) returns (Job);
    rpc getPendingJobs (RpcGetPendingJobs) returns (PendingJobs);
    rpc isJobDone (RpcGetJob) returns (RpcIsJobDone);
    rpc acceptJob(RpcAcceptJob) returns (Job);
    rpc cancelJob(RpcCancelJob) returns (Job);
    rpc outputForJob(RpcJobOutput) returns (Job);
    rpc completeJob(RpcJobComplete) returns (Job);
    rpc logForJob(RpcJobLog) returns (Job);


    // discovery
    rpc announceNode (RpcAnnounceNodeRequest) returns (RpcAnnounceNodeResponse);
    rpc announceEventTemplate (RpcAnnounceTemplateRequest) returns (RpcAnnounceTemplateResponse);
    rpc discoverPools(RpcDiscoverPoolsRequest) returns (RpcDiscoverPoolsResponse);
    rpc discoverNodes(RpcDiscoverNodesRequest) returns (RpcDiscoverNodesResponse);
    rpc discoverActions(RpcDiscoverActionsRequest) returns (RpcDiscoverActionsResponse);
    rpc discoverNearbyNodes(RpcDiscoverNearbyNodesRequest) returns (RpcDiscoverNearbyNodesResponse);
    rpc discoverNearbyActions(RpcDiscoverNearbyActionsRequest) returns (RpcDiscoverNearbyActionsResponse);


    // generic nostr events
    rpc sendSignedEvent (RpcSendSignedEventRequest) returns (RpcSendSignedEventResponse);
    rpc subscribeToEvents (RpcSubscribeToEventsRequest) returns (RpcSubscribeToEventsResponse);
    rpc unsubscribeFromEvents (RpcUnsubscribeFromEventsRequest) returns (RpcUnsubscribeFromEventsResponse);
    rpc getEvents(RpcGetEventsRequest) returns (RpcGetEventsResponse);


    // blob storage
    rpc createDisk(RpcCreateDiskRequest) returns (RpcCreateDiskResponse);
    rpc openDisk(RpcOpenDiskRequest) returns (RpcOpenDiskResponse);
    rpc closeDisk(RpcCloseDiskRequest) returns (RpcCloseDiskResponse);

    rpc diskDeleteFile(RpcDiskDeleteFileRequest) returns (RpcDiskDeleteFileResponse);
    rpc diskListFiles(RpcDiskListFilesRequest) returns (RpcDiskListFilesResponse);
    rpc diskReadFile(RpcDiskReadFileRequest) returns (stream RpcDiskReadFileResponse);
    rpc diskReadSmallFile(RpcDiskReadFileRequest) returns (RpcDiskReadFileResponse);
    rpc diskWriteFile(stream RpcDiskWriteFileRequest) returns (RpcDiskWriteFileResponse);
    rpc diskWriteSmallFile(RpcDiskWriteFileRequest) returns (RpcDiskWriteFileResponse);
    

    // cache
    rpc cacheSet(stream RpcCacheSetRequest) returns (RpcCacheSetResponse);
    rpc cacheGet(RpcCacheGetRequest) returns (stream RpcCacheGetResponse);


    // pay
    // rpc requestPayment(RpcRequestPayment) returns (RpcRequestPaymentResponse);
    // rpc cancelAndRefundPayment(RpcCancelAndRefundPayment) returns (RpcCancelAndRefundPaymentResponse);
    
    // rpc getPayment(RpcGetPayment) returns (RpcGetPaymentResponse);
    // rpc sendPayment(RpcSendPayment) returns (RpcSendPaymentResponse);
    


    
}








